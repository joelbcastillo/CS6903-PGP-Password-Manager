"""Initial migration.

Revision ID: a08cd599cfff
Revises: 
Create Date: 2021-05-02 22:55:29.633828

"""
from alembic import op
import sqlalchemy as sa
import uuid
from sqlalchemy.dialects import postgresql, sqlite
from sqlalchemy.types import TypeDecorator, CHAR, Text

# revision identifiers, used by Alembic.
revision = 'a08cd599cfff'
down_revision = None
branch_labels = None
depends_on = None


class GUID(TypeDecorator):
    """Platform-independent GUID type.
    Uses PostgreSQL's UUID type, otherwise uses
    CHAR(32), storing as stringified hex values.
    """
    impl = CHAR

    def load_dialect_impl(self, dialect):
        if dialect.name == 'postgresql':
            return dialect.type_descriptor(postgresql.UUID())
        else:
            return dialect.type_descriptor(CHAR(32))

    def process_bind_param(self, value, dialect):
        if value is None:
            return value
        elif dialect.name == 'postgresql':
            return str(value)
        else:
            if not isinstance(value, uuid.UUID):
                return "%.32x" % uuid.UUID(value).int
            else:
                # hexstring
                return "%.32x" % value.int

    def process_result_value(self, value, dialect):
        if value is None:
            return value
        else:
            if not isinstance(value, uuid.UUID):
                value = uuid.UUID(value)
            return value


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('secrets',
                    sa.Column('id', GUID(), nullable=False),
                    sa.Column('name', sa.BLOB(), nullable=False),
                    sa.Column('encrypted_value', sa.BLOB(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('users',
                    sa.Column('id', GUID(), nullable=False),
                    sa.Column('key_id', sa.String(length=80), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('key_id')
                    )
    op.create_table('audit',
                    sa.Column('id', GUID(), nullable=False),
                    sa.Column('timestamp', sa.DateTime(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('action_performed', sa.Enum('encrypted_secret', 'decrypted_secret', 'deleted_secret'),
                              nullable=False),
                    sa.Column('inputs', sqlite.JSON(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('users_secrets',
                    sa.Column('id', GUID(), nullable=False),
                    sa.Column('key_id', sa.String(length=80), nullable=False),
                    sa.Column('secret_id', GUID(), nullable=False),
                    sa.ForeignKeyConstraint(['key_id'], ['users.key_id'], ),
                    sa.ForeignKeyConstraint(['secret_id'], ['secrets.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users_secrets')
    op.drop_table('audit')
    op.drop_table('users')
    op.drop_table('secrets')
    # ### end Alembic commands ###
